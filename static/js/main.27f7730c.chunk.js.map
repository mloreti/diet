{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","gradeRef","useRef","dateRef","weightRef","gradesRef","useFirestore","collection","grades","useFirestoreCollectionData","now","Date","useEffect","current","valueAsDate","UTC","getFullYear","getMonth","getDate","className","Table","responsive","map","date","grade","weight","key","seconds","toDate","toLocaleDateString","Form","onSubmit","e","preventDefault","data","value","add","Group","controlId","Label","Control","type","ref","required","as","step","Button","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","fallback","traceId","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQA6FeA,MArFf,WACE,IAAMC,EAAWC,iBAAO,MAClBC,EAAUD,iBAAO,MACjBE,EAAYF,iBAAO,MACnBG,EAAYC,cAAeC,WAAW,UACtCC,EAASC,YAA2BJ,GACpCK,EAAM,IAAIC,KAyBhB,OAvBAC,qBAAU,WACRT,EAAQU,QAAQC,YAAc,IAAIH,KAChCA,KAAKI,IAAIL,EAAIM,cAAeN,EAAIO,WAAYP,EAAIQ,cAEjD,CAACR,IAoBF,yBAAKS,UAAU,OACb,oCACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,uCACA,kBAACC,EAAA,EAAD,CAAOC,YAAU,GACf,+BACE,4BACE,oCACA,sCACA,uCAGJ,+BACGb,EAAOc,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,OAAhB,OACV,wBAAIC,IAAKH,EAAKI,SACZ,4BAAKJ,EAAKK,SAASC,sBACnB,4BAAKJ,GACL,4BAAKD,UAMf,yBAAKL,UAAU,QACb,yCACA,kBAACW,EAAA,EAAD,CAAMC,SAxCO,SAACC,GACpBA,EAAEC,iBADwB,IAJVC,EAMDV,EAAUvB,EAASY,QAA1BsB,MACOZ,EAASpB,EAAQU,QAAxBsB,MACOV,EAAWrB,EAAUS,QAA5BsB,MARQD,EAUP,CACPV,QACAD,KAAM,IAAIZ,KAAKY,GACfE,UAZFpB,EAAU+B,IAAIF,KA4CN,kBAACJ,EAAA,EAAKO,MAAN,CAAYC,UAAU,IACpB,kBAACR,EAAA,EAAKS,MAAN,aACA,kBAACT,EAAA,EAAKU,QAAN,CAAcC,KAAK,OAAOC,IAAKvC,EAASwC,UAAQ,KAElD,kBAACb,EAAA,EAAKO,MAAN,CAAYC,UAAU,IACpB,kBAACR,EAAA,EAAKS,MAAN,cACA,kBAACT,EAAA,EAAKU,QAAN,CAAcI,GAAG,SAASF,IAAKzC,EAAU0C,UAAQ,GAC/C,qCACA,qCACA,qCACA,qCACA,uCAGJ,kBAACb,EAAA,EAAKO,MAAN,CAAYC,UAAU,IACpB,kBAACR,EAAA,EAAKS,MAAN,eACA,kBAACT,EAAA,EAAKU,QAAN,CAAcC,KAAK,SAASI,KAAK,KAAKH,IAAKtC,EAAWuC,UAAQ,KAEhE,kBAACG,EAAA,EAAD,CAAQL,KAAK,UAAb,eCzEQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCCNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAqBC,eAZF,CACrBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,8CAMH,kBAAC,IAAD,CACEC,SAAU,gDACVC,QAAS,sBAET,kBAAC,EAAD,SAINC,SAASC,eAAe,SDqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27f7730c.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { useFirestore, useFirestoreCollectionData } from \"reactfire\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const gradeRef = useRef(null);\n  const dateRef = useRef(null);\n  const weightRef = useRef(null);\n  const gradesRef = useFirestore().collection(\"grades\");\n  const grades = useFirestoreCollectionData(gradesRef);\n  const now = new Date();\n\n  useEffect(() => {\n    dateRef.current.valueAsDate = new Date(\n      Date.UTC(now.getFullYear(), now.getMonth(), now.getDate())\n    );\n  }, [now]);\n\n  const addGrade = (data) => {\n    gradesRef.add(data);\n  };\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    const { value: grade } = gradeRef.current;\n    const { value: date } = dateRef.current;\n    const { value: weight } = weightRef.current;\n\n    addGrade({\n      grade,\n      date: new Date(date),\n      weight,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Diet</h1>\n      <div className=\"container\">\n        <div className=\"table\">\n          <h4>History</h4>\n          <Table responsive>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Weight</th>\n                <th>Grade</th>\n              </tr>\n            </thead>\n            <tbody>\n              {grades.map(({ date, grade, weight }) => (\n                <tr key={date.seconds}>\n                  <td>{date.toDate().toLocaleDateString()}</td>\n                  <td>{weight}</td>\n                  <td>{grade}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </div>\n        <div className=\"form\">\n          <h4>New Grade</h4>\n          <Form onSubmit={onFormSubmit}>\n            <Form.Group controlId=\"\">\n              <Form.Label>Date</Form.Label>\n              <Form.Control type=\"date\" ref={dateRef} required />\n            </Form.Group>\n            <Form.Group controlId=\"\">\n              <Form.Label>Grade</Form.Label>\n              <Form.Control as=\"select\" ref={gradeRef} required>\n                <option>A</option>\n                <option>B</option>\n                <option>C</option>\n                <option>D</option>\n                <option>F</option>\n              </Form.Control>\n            </Form.Group>\n            <Form.Group controlId=\"\">\n              <Form.Label>Weight</Form.Label>\n              <Form.Control type=\"number\" step=\".1\" ref={weightRef} required />\n            </Form.Group>\n            <Button type=\"submit\">Submit</Button>\n          </Form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { FirebaseAppProvider, SuspenseWithPerf } from \"reactfire\";\n\nimport \"./index.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDAcpOJhivHCS0GGD8opng4ujdXJ8_babk\",\n  authDomain: \"diet-school.firebaseapp.com\",\n  databaseURL: \"https://diet-school.firebaseio.com\",\n  projectId: \"diet-school\",\n  storageBucket: \"diet-school.appspot.com\",\n  messagingSenderId: \"605118797037\",\n  appId: \"1:605118797037:web:223a3393c646e3ea0428e4\",\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <FirebaseAppProvider firebaseConfig={firebaseConfig}>\n      <SuspenseWithPerf\n        fallback={<p>loading grades...</p>}\n        traceId={\"load-grades-status\"}\n      >\n        <App />\n      </SuspenseWithPerf>\n    </FirebaseAppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}